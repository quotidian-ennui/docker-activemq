# configuration file for git-cliff (0.1.0)

[changelog]
# changelog header
header = """
# Changelog\n
A new ActiveMQ release happened; this changelog just lists the changes to the repo used to build the docker image.\n

> Note that [https://hub.docker.com/r/apache/activemq](https://hub.docker.com/r/apache/activemq) now exists which means that this image will die a slow death.
> I've left it as-is because it takes very little actual effort on my part (updatecli + tag); I anticipate that 5.19.x may well be the last release(s)
> and it shouldn't really matter that much since you won't have been using it for anything other than testing because it's not hardened or productionized in any fashion (right?)\n

"""
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}({{ commit.scope }}) {% endif %}{% if commit.breaking %}(**BREAKING**) {% endif %}{{ commit.message | upper_first }} by {{commit.author.name}}\
    {% endfor %}
{% endfor %}\n
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
"""

postprocessors = [
    { pattern = 'dependabot\[.*\]', replace="@dependabot"},
    { pattern = 'Lewin Chan', replace="@quotidian-ennui"},
]

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# regex for preprocessing the commit messages
commit_preprocessors = [
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/quotidian-ennui/docker-activemq/issues/${2}))"},
    { pattern = '^Bump (.*)', replace = "deps: Bump $1"},
]
# regex for parsing and grouping commits
commit_parsers = [
    { body = ".*security", group = "<!-- 00 -->Security"},
    { message = "^feat\\(ci|build\\)", group = "<!-- 07 -->Build Environment"},
    { message = "^feat", group = "<!-- 01 -->Features"},
    { message = "^fixup!", skip = true},
    { message = "^fix", group = "<!-- 02 -->Bug Fixes"},
    { message = "^doc", group = "<!-- 03 -->Documentation"},
    { message = "^perf", group = "<!-- 04 -->Performance"},
    { message = "^refactor\\(ci|build\\)", group = "<!-- 07 -->Build Environment"},
    { message = "^refactor", group = "<!-- 05 -->Refactoring"},
    { message = "^test", group = "<!-- 06 -->Testing"},
    { message = "^(ci|build)", group = "<!-- 07 -->Build Environment"},
    { message = "^fix\\(ci|build\\)", group = "<!-- 07 -->Build Environment"},
    { message = "^deps\\(actions\\)", group = "<!-- 07 -->Build Environment"},
    { message = "^deps", group = "<!-- 08 -->Dependency Management"},
    { message = "^chore\\(deps\\)", group = "<!-- 08 -->Dependency Management"},
    { message = "^chore\\(release\\):", skip = true},
    { message = "^release:", skip = true},
    { message = "^chore", group = "<!-- 99 -->Miscellaneous Tasks"},
]
# filter out the commits that are not matched by commit parsers
filter_commits = false
# glob pattern for matching git tags
tag_pattern = "[0-9]*"
# regex for skipping tags
skip_tags = ".*-beta.*"
# regex for ignoring tags
ignore_tags = ".*-alpha.*"
# sort the tags chronologically
date_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
protect_breaking_commits = true
